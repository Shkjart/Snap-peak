// index.js
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Client, GatewayIntentBits, Partials, EmbedBuilder } = require('discord.js');

const TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID || '1431646537045381170';
const DATA_FILE = path.join(__dirname, 'reports.json');
const SEND_INTERVAL_MS = parseInt(process.env.SEND_INTERVAL_MS || '6000', 10);
const MIN_THRESHOLD_MILLIONS = parseFloat(process.env.MIN_THRESHOLD_MILLIONS || '2.5');

if (!TOKEN) {
  console.error('ضع BOT_TOKEN في ملف .env');
  process.exit(1);
}
if (!fs.existsSync(DATA_FILE)) {
  fs.writeFileSync(DATA_FILE, JSON.stringify([], null, 2));
  console.log('تم إنشاء reports.json فارغ. عدّله وأضف تقاريرك.');
}

function readReports() {
  try {
    return JSON.parse(fs.readFileSync(DATA_FILE, 'utf8'));
  } catch (e) {
    console.error('خطأ بقراءة reports.json:', e);
    return [];
  }
}

function parsePerSecondToMillions(s) {
  if (!s || typeof s !== 'string') return 0;
  let str = s.toLowerCase().replace('/s', '').replace('per second', '').trim();
  str = str.replace(/\$/g, '').trim();
  const m = str.match(/^([\d.,]+)\s*([kmbt]?)/i);
  if (!m) return 0;
  let num = parseFloat(m[1].replace(',', '.'));
  if (isNaN(num)) return 0;
  const suf = (m[2] || '').toLowerCase();
  if (suf === 'k') return num / 1000;
  if (suf === 'm' || suf === '') return num;
  if (suf === 'b') return num * 1000;
  if (suf === 't') return num * 1000000;
  return num;
}

function makeEmbedFromReport(r, serverLinkResolved) {
  const title = `🔎 سر عالي القيمة تم العثور عليه — ${r.itemNameAr || r.itemName || 'Unknown'}`;
  const desc = `هل تبي وصول لأسرار قيمتها 10M+؟\nمثال من تقارير المجتمع.`;
  const perSec = r.perSecond || 'N/A';
  const total = r.totalWorth || 'N/A';
  const player = r.player || 'غير معروف';
  const serverLink = serverLinkResolved || r.serverLink || (r.serverName || 'غير متوفر');

  const embed = new EmbedBuilder()
    .setTitle(title)
    .setDescription(desc)
    .addFields(
      { name: 'اللاعب', value: `${player}`, inline: true },
      { name: 'القيمة/ثانية', value: `${perSec}`, inline: true },
      { name: 'القيمة الكلية', value: `${total}`, inline: true },
      { name: 'رابط السيرفر', value: serverLink, inline: false },
      { name: 'الاسم (إنجليزي)', value: `${r.itemName || 'N/A'}`, inline: false }
    )
    .setFooter({ text: 'snap peak • تلقائي' })
    .setTimestamp()
    .setColor(0xFF4B4B);

  if (r.thumbnail) embed.setThumbnail(r.thumbnail);
  return embed;
}

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages],
  partials: [Partials.Channel],
});

async function resolveServerLink(report) {
  if (report.serverLink && typeof report.serverLink === 'string' && report.serverLink.trim() !== '') {
    return report.serverLink;
  }
  if (report.inviteChannelId) {
    try {
      const ch = await client.channels.fetch(report.inviteChannelId);
      if (ch && typeof ch.createInvite === 'function') {
        const inv = await ch.createInvite({ maxAge: 0, maxUses: 0, unique: false, reason: 'Generated by Snap Peak bot' });
        return `https://discord.gg/${inv.code}`;
      } else {
        return 'القناة غير متاحة للدعوة';
      }
    } catch (err) {
      return 'فشل إنشاء الدعوة (تحقق من صلاحيات البوت)';
    }
  }
  return 'غير متوفر';
}

client.once('ready', () => {
  console.log(`البوت جاهز: ${client.user.tag}`);
  startAutoSendLoop();
});

async function sendRandomStrongReport() {
  const reports = readReports();
  if (!Array.isArray(reports) || reports.length === 0) {
    console.log('لا توجد تقارير في reports.json');
    return;
  }
  const strong = reports.filter(r => parsePerSecondToMillions(r.perSecond) >= MIN_THRESHOLD_MILLIONS);
  if (strong.length === 0) {
    console.log(`لا توجد تقارير بقيمة/ثانية >= ${MIN_THRESHOLD_MILLIONS}M`);
    return;
  }
  const pick = strong[Math.floor(Math.random() * strong.length)];
  const channel = await client.channels.fetch(CHANNEL_ID).catch(() => null);
  if (!channel || !channel.isTextBased?.()) {
    console.error('ما قدرت أجيب القناة. تأكد من CHANNEL_ID وصلاحيات البوت.');
    return;
  }
  const serverLinkResolved = await resolveServerLink(pick);
  const embed = makeEmbedFromReport(pick, serverLinkResolved);
  try {
    await channel.send({ embeds: [embed] });
    console.log(`أرسلت: ${pick.itemName || pick.itemNameAr} (${pick.perSecond}) => ${serverLinkResolved}`);
  } catch (e) {
    console.error('فشل إرسال الرسالة:', e);
  }
}

let autoIntervalHandle = null;
function startAutoSendLoop() {
  if (autoIntervalHandle) clearInterval(autoIntervalHandle);
  sendRandomStrongReport();
  autoIntervalHandle = setInterval(sendRandomStrongReport, SEND_INTERVAL_MS);
}

client.login(TOKEN).catch(err => {
  console.error('خطأ بتسجيل الدخول للبوت:', err);
});
